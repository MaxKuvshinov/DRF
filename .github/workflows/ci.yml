name: CI/CD Pipline

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install poetry 
          poetry install 

      - name: Run flake8
        run: |
          poetry run flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install poetry 
          poetry install

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          sudo service postgresql start
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD '1104997';"
          sudo -u postgres psql -c "CREATE DATABASE drf;"
          sudo -u postgres psql -c "CREATE ROLE runner WITH LOGIN PASSWORD '1104997';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE drf TO runner;"
          sudo -u postgres psql -c "GRANT CREATE ON SCHEMA public TO runner;"
          echo "DATABASE_URL=postgres://runner:1104997@localhost/drf" >> $GITHUB_ENV


      - name: Run migrations
        run: |
          poetry run python manage.py migrate

      - name: Run tests
        run: |
          poetry run python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Copy project files to server
        run: |
          rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Install dependencies on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            python3 -m venv venv
            source venv/bin/activate
            pip install poetry
            poetry install
          EOF

      - name: Apply migrations on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            source venv/bin/activate
            poetry run python manage.py migrate
          EOF

      - name: Collect static files on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            source venv/bin/activate
            poetry run python manage.py collectstatic --noinput
          EOF

      - name: Restart application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sudo systemctl restart myapp.service
          EOF
