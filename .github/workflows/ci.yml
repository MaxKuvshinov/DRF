name: CI/CD Pipline

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install poetry 
          poetry install 

      - name: Run flake8
        run: |
          poetry run flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install poetry 
          poetry install
          

      - name: Create .env file
        run: |
          echo POSTGRES_USER="${{ secrets.POSTGRES_USER }}" >> .env
          echo POSTGRES_PASSWORD="${{ secrets.POSTGRES_USER }}" >> .env
          echo POSTGRES_DB="${{ secrets.POSTGRES_USER }}" >> .env
          echo POSTGRES_HOST=db" >> .env

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start Docker Compose
        run: docker-compose up -d db


      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h db -p 5432; do
            echo "Waiting for PostgreSQL...";
            sleep 3;
          done

      - name: Run migrations
        env:
          SECRET_KEY: "${{ secrets.SECRET_KEY }}"
        run: |
          poetry run python manage.py migrate



      - name: Run tests
        env:
          SECRET_KEY: "${{ secrets.SECRET_KEY }}"
        run: |
          poetry run python manage.py test
          

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Copy project files to server
        run: |
          rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Install dependencies on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            python3 -m venv venv
            source venv/bin/activate
            pip install poetry
            poetry install
          EOF

      - name: Apply migrations on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            source venv/bin/activate
            poetry run python manage.py migrate
          EOF

      - name: Collect static files on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}
            source venv/bin/activate
            poetry run python manage.py collectstatic --noinput
          EOF

      - name: Restart application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sudo systemctl restart myapp.service
          EOF

