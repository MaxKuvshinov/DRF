name: CI/CD Pipeline

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install poetry 
          poetry install 

      - name: Run flake8
        run: |
          poetry run flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          poetry install --no-root

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          sudo service postgresql start
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';"
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.POSTGRES_DB }};"
          sudo -u postgres psql -c "CREATE ROLE ${{ secrets.POSTGRES_USER }} WITH LOGIN PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.POSTGRES_DB }} TO ${{ secrets.POSTGRES_USER }};"
          sudo -u postgres psql -c "GRANT CREATE ON SCHEMA public TO ${{ secrets.POSTGRES_USER }};"
          echo "DATABASE_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost/${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV

      - name: Run makemigrations
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          poetry run python manage.py makemigrations

      - name: Run migrate
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          poetry run python manage.py migrate

      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          poetry run python manage.py test


  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no -l ${{ secrets.SSH_USER }} ${{ secrets.SERVER_IP }} << 'EOF'
          cd /path/to/your/project
          git pull origin main
          poetry install
          poetry run python manage.py migrate
          sudo systemctl restart myapp.service
          EOF

#      - name: Add server to known_hosts
#        run: ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts


#      - name: Copy project files to server
#        run: |
#          rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

#      - name: Install dependencies on server
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#            cd ${{ secrets.DEPLOY_DIR }}
#            python3 -m venv venv
#            source venv/bin/activate
#            pip install poetry
#            poetry install
#          EOF
#
#      - name: Apply migrations on server
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#            cd ${{ secrets.DEPLOY_DIR }}
#            source venv/bin/activate
#            poetry run python manage.py migrate
#          EOF
#
#      - name: Collect static files on server
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#            cd ${{ secrets.DEPLOY_DIR }}
#            source venv/bin/activate
#            poetry run python manage.py collectstatic --noinput
#          EOF
#
#      - name: Restart application
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#            sudo systemctl restart myapp.service
#          EOF
